<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/context/spring-security-3.0.xsd">
    <annotation-driven />
    
    <context:property-placeholder
        location="classpath*:*.properties" />
        
    <beans:import resource="infrastructure.xml"/>
    <beans:import resource="security.xml"/>
    <beans:import resource="spring-mail.xml"/>

    <context:component-scan base-package="com.rickwebstudy.service.impl,com.rickwebstudy.controller" />

    <!--
        Configures the location of static resources such as css files.
        Requires Spring Framework 3.0 or higher.
    -->
    <mvc:resources mapping="/static/**" location="/static/"/>

    <!--
        Ensures that dispatcher servlet can be mapped to '/' and static resources
        are still served by the containers default servlet. Requires Spring Framework
        3.0 or higher.
    -->
    <mvc:default-servlet-handler/>
    
    <beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver"/>
    
   
	
	 <!--<bean id="tilesViewResolver"
          class="org.springframework.web.servlet.view.UrlBasedViewResolver"
          p:viewClass="org.springframework.web.servlet.view.tiles2.TilesView" />-->

	<!-- Configures the Tiles layout system -->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/config/views.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
       
    <beans:bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<beans:property name="exceptionMappings">
			<beans:props>
				<beans:prop key=".DataAccessException">dataAccessFailure</beans:prop>		
				<beans:prop key=".lang.Exception">uncaughtException</beans:prop>		
				<beans:prop key=".AuthenticationCredentialsNotFoundException">login</beans:prop>		
				<beans:prop key=".AccessDeniedException">login</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
	<beans:bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver" p:order="1">
		<beans:property name="mediaTypes">
			<beans:map>
				<beans:entry key="xml" value="application/xml"/>
				<beans:entry key="json" value="application/json"/>
			</beans:map>
		</beans:property>
		<beans:property name="defaultViews">
			<beans:list>
				<beans:bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<beans:property name="marshaller">
						<beans:bean class="org.springframework.oxm.xstream.XStreamMarshaller" p:autodetectAnnotations="true" />
					</beans:property>
				</beans:bean>
				<beans:bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- <beans:bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="1">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles.TilesJstlView" />
	</beans:bean>-->
	
	
	 <!-- Resolves logical view names returned by Controllers to Tiles; a view name to resolve is treated as the name of a tiles definition -->
	<beans:bean id="tilesViewResolver" class="org.springframework.js.ajax.AjaxUrlBasedViewResolver" p:order="1">
		<beans:property name="viewClass" value="org.springframework.webflow.mvc.view.FlowAjaxTilesView"/>
	</beans:bean>
	
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
	    p:prefix="/WEB-INF/views/" 
	    p:suffix=".jsp" 
	    p:order="2"/>
	

	<!-- Maps request paths to flows in the flowRegistry; e.g. a path of /wizard looks for a flow with id "wizard" 
	<beans:bean class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping">
		<beans:property name="order" value="0" />
		<beans:property name="flowRegistry" ref="flowRegistry" />
	</beans:bean>-->
	
	<!-- Maps request paths to @Controller classes; e.g. a path of /person looks for a controller named PersonController -->
	<beans:bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<beans:property name="order" value="1" />
	</beans:bean>
	
	<!-- Dispatches requests mapped to flows to FlowHandler implementations 
	<beans:bean class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter">
		<beans:property name="flowExecutor" ref="flowExecutor"/>
	</beans:bean>-->
	
		<!-- Dispatches requests mapped to POJO @Controllers implementations -->
	<beans:bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
	
        
</beans:beans>
